import tkinter as tk  # J'importe le module tkinter pour crÃ©er l'interface graphique ğŸ¤©CimStudioDevğŸ¤©
from tkinter import ttk, messagebox  # J'importe les widgets supplÃ©mentaires et les boÃ®tes de dialogue ğŸ¤©CimStudioDevğŸ¤©
import json  # J'importe json pour enregistrer les sessions utilisateur dans un fichier ğŸ¤©CimStudioDevğŸ¤©
import os  # J'importe os pour manipuler les fichiers comme session.txt ğŸ¤©CimStudioDevğŸ¤©
import sys  # J'importe sys en cas de besoin futur pour les chemins ou arguments systÃ¨me ğŸ¤©CimStudioDevğŸ¤©

# --- Couleurs et Styles ---
PRIMARY_COLOR = "#3b5998"      # Couleur principale bleue utilisÃ©e pour les boutons et le titre ğŸ¤©CimStudioDevğŸ¤©
SECONDARY_COLOR = "#80E2D6"    # Couleur secondaire utilisÃ©e pour le fond ğŸ¤©CimStudioDevğŸ¤©
BUTTON_BG = PRIMARY_COLOR  # Fond des boutons dÃ©fini avec la couleur principale ğŸ¤©CimStudioDevğŸ¤©
BUTTON_FG = "white"  # Texte des boutons en blanc pour bien ressortir ğŸ¤©CimStudioDevğŸ¤©
HEADER_FONT = ("Arial", 24, "bold")  # Police d'Ã©criture pour le titre principal ğŸ¤©CimStudioDevğŸ¤©
LABEL_FONT = ("Arial", 12)  # Police pour les Ã©tiquettes secondaires ğŸ¤©CimStudioDevğŸ¤©
FOOTER_FONT = ("Arial", 9)  # Police pour le pied de page ğŸ¤©CimStudioDevğŸ¤©
PRIMARY_COLOR2 = "#FF0000"  # Rouge pour les actions critiques comme la dÃ©connexion ğŸ¤©CimStudioDevğŸ¤©

class MenuPage(tk.Frame):  # Je dÃ©finis la classe MenuPage pour afficher le menu principal ğŸ¤©CimStudioDevğŸ¤©
    def __init__(self, parent, controller):  # Initialisation de la page avec parent et contrÃ´leur ğŸ¤©CimStudioDevğŸ¤©
        super().__init__(parent)  # Appel du constructeur de la classe parente ğŸ¤©CimStudioDevğŸ¤©
        self.controller = controller  # Je garde une rÃ©fÃ©rence du contrÃ´leur pour la navigation ğŸ¤©CimStudioDevğŸ¤©
        self.configure(bg=SECONDARY_COLOR)  # J'applique la couleur de fond Ã  la page ğŸ¤©CimStudioDevğŸ¤©

        # --- Titre principal ---
        header = tk.Label(self, text="STOCK MASTER", font=HEADER_FONT,
                          fg=PRIMARY_COLOR, bg=SECONDARY_COLOR)  # Titre de l'application ğŸ¤©CimStudioDevğŸ¤©
        header.pack(pady=20)  # Espacement autour du titre ğŸ¤©CimStudioDevğŸ¤©

        menu_label = tk.Label(self, text="Menu Principal", font=("Arial", 16),
                              bg=SECONDARY_COLOR, fg=PRIMARY_COLOR)  # Sous-titre du menu principal ğŸ¤©CimStudioDevğŸ¤©
        menu_label.pack(pady=10)  # Espacement autour du sous-titre ğŸ¤©CimStudioDevğŸ¤©

        # --- Boutons du menu ---
        btn_frame = tk.Frame(self, bg=SECONDARY_COLOR)  # Conteneur pour les boutons du menu ğŸ¤©CimStudioDevğŸ¤©
        btn_frame.pack(pady=20)  # Espacement autour du cadre de boutons ğŸ¤©CimStudioDevğŸ¤©

        achats_btn = tk.Button(btn_frame, text="ACHATS", font=50, width=25, height=5,
                               bg=BUTTON_BG, fg=BUTTON_FG,
                               command=lambda: controller.show_frame("AchatsPage"))  # Bouton pour accÃ©der Ã  la page Achats ğŸ¤©CimStudioDevğŸ¤©
        achats_btn.grid(row=0, column=0, padx=40)  # Positionnement du bouton dans la grille ğŸ¤©CimStudioDevğŸ¤©

        ventes_btn = tk.Button(btn_frame, text="VENTES", font=50, width=25, height=5,
                               bg=BUTTON_BG, fg=BUTTON_FG,
                               command=lambda: controller.show_frame("VentesPage"))  # Bouton pour accÃ©der Ã  la page Ventes ğŸ¤©CimStudioDevğŸ¤©
        ventes_btn.grid(row=0, column=1, padx=40)  # Positionnement du bouton dans la grille ğŸ¤©CimStudioDevğŸ¤©

        # --- Conteneur en bas : boutons + footer ---
        bottom_frame = tk.Frame(self, bg=SECONDARY_COLOR)  # Zone en bas pour les actions supplÃ©mentaires ğŸ¤©CimStudioDevğŸ¤©
        bottom_frame.pack(side="bottom", fill="x", pady=10)  # Placement en bas avec un peu d'espace ğŸ¤©CimStudioDevğŸ¤©

        btn_deconnecter = tk.Button(bottom_frame, text="DÃ©connecter",
                                    command=self.retour_loginpage,
                                    bg=PRIMARY_COLOR2, fg=BUTTON_FG)  # Bouton pour se dÃ©connecter ğŸ¤©CimStudioDevğŸ¤©
        btn_deconnecter.pack(pady=(0, 5))  # Espacement en dessous ğŸ¤©CimStudioDevğŸ¤©

        btn_sans_deco = tk.Button(bottom_frame, text="Quitter sans dÃ©connecter",
                                  command=self.quitter_sans_deconnecter,
                                  bg="gray", fg=BUTTON_FG)  # Quitter lâ€™application sans supprimer la session ğŸ¤©CimStudioDevğŸ¤©
        btn_sans_deco.pack(pady=(0, 10))  # Espacement en dessous ğŸ¤©CimStudioDevğŸ¤©

        footer = tk.Label(bottom_frame, text="Â©2025 CimStudioDev", font=FOOTER_FONT,
                          fg=BUTTON_BG, bg=SECONDARY_COLOR)  # Pied de page avec le copyright ğŸ¤©CimStudioDevğŸ¤©
        footer.pack(side="bottom")  # Position en bas de la fenÃªtre ğŸ¤©CimStudioDevğŸ¤©

    def retour_loginpage(self):
        """Retourne Ã  la page de connexion et supprime la session."""  # Je supprime session.txt et retourne Ã  Login ğŸ¤©CimStudioDevğŸ¤©
        reponse = messagebox.askyesno("DÃ©connexion", "Voulez-vous vraiment vous dÃ©connecter ?")  # Confirmation ğŸ¤©CimStudioDevğŸ¤©
        if reponse:
            try:
                os.remove("session.txt")  # Je supprime le fichier de session pour se dÃ©connecter ğŸ¤©CimStudioDevğŸ¤©
            except FileNotFoundError:
                pass  # Si le fichier n'existe pas, je passe ğŸ¤©CimStudioDevğŸ¤©
            self.controller.show_frame("LoginPage")  # Je retourne Ã  la page de connexion ğŸ¤©CimStudioDevğŸ¤©

    def quitter_sans_deconnecter(self):
        """Enregistre la session et quitte l'application."""  # Je garde la session et je quitte ğŸ¤©CimStudioDevğŸ¤©
        reponse = messagebox.askyesno("Quitter sans dÃ©connecter", "Voulez-vous vraiment quitter sans vous dÃ©connecter ?")  # Confirmation ğŸ¤©CimStudioDevğŸ¤©
        if not reponse:
            return

        user = self.controller.current_user  # Je rÃ©cupÃ¨re l'utilisateur actuel ğŸ¤©CimStudioDevğŸ¤©
        if user:
            try:
                with open("session.txt", "w", encoding="utf-8") as f:  # Jâ€™enregistre le numÃ©ro dans le fichier session ğŸ¤©CimStudioDevğŸ¤©
                    json.dump({"phone": user["telephone"]}, f)
            except Exception as e:
                messagebox.showerror("Erreur", f"Impossible d'enregistrer la session.\n{e}")  # En cas dâ€™erreur dâ€™enregistrement ğŸ¤©CimStudioDevğŸ¤©
                return
        self.controller.destroy()  # Je ferme l'application ğŸ¤©CimStudioDevğŸ¤©
